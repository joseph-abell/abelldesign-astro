---
import Layout from '../../layouts/mainLayout.astro';
import Container from '../../components/atoms/Container.astro';
import WorkImage from '../../components/atoms/WorkImage.svelte';
import ListH1 from '../../components/atoms/ListH1.astro';
import WorkPrimaryImages from '../../components/atoms/WorkPrimaryImages.svelte';
import WorkPrimaryImage from '../../components/atoms/WorkPrimaryImage.svelte';
import WorkMain from '../../components/atoms/WorkMain.svelte';
import Quote from '../../components/molecules/Quote.astro';
import List from '../../components/molecules/List.astro';
import MoreWork from '../../components/atoms/MoreWork.svelte';
import Header from '../../components/molecules/Header.svelte';
import Footer from '../../components/molecules/Footer.astro';
import WhiteBackground from '../../components/atoms/WhiteBackground.astro';

import fetchData from '../../helpers/fetchData';
import siteQuery from '../../queries/site';
import query from '../../queries/works';
import nextWorkQuery from '../../queries/nextWork';
import firstWorkQuery from '../../queries/firstWork';

export async function getStaticPaths() {
    const {works = []} = await fetchData(fetch, query);
    return works.filter((work) => work.stage === 'PUBLISHED')?.sort((a, b) => a.createdAt - b.createdAt).map(blog => ({ params: { slug: blog.slug }}))
}

const siteData = await fetchData(fetch, siteQuery);
const { headers, footers } = siteData;
let { menu } = siteData;

menu = menu.sort((a, b) => a.order - b.order);

const header = headers[0];
const footer = footers[0];

let {works = [], quote, quoter} = await fetchData(fetch, query);
works = works.filter((work) => work.stage === 'PUBLISHED')?.sort((a, b) => a.createdAt - b.createdAt)

const work = works.find(work => work.slug === Astro.request.params.slug);

const nextWork = work.id && await fetchData(fetch, nextWorkQuery, { id: work.id });
let nextData = nextWork?.worksConnection.edges[0];
let next;

if (!!nextData) {
    next = nextData && nextData.node;
} else {
    nextData = await fetchData(fetch, firstWorkQuery);
    next = nextData.works[0];
}

---
<Layout title={`${work?.title || "Work"} - Abell Design`} description={work?.seoDescription || ''}>
    <div>
        <p class="hidden"  style="position: absolute; left: -100vw" itemprop="name">Abell Design</p>
        <WhiteBackground>
            <div class="header-container">
                <Header client:load {header} {menu} isHome={false} />
            </div>

        <Container>
            <div itemscope itemtype="https://schema.org/Service">
                <ListH1 itemprop="name">{work.title}</ListH1>
                <WorkPrimaryImages>
                    {(work.images || []).map(image => (
                        <WorkPrimaryImage>
                            <img src={image.url} alt='' itemprop="image" />
                        </WorkPrimaryImage>
                    ))}
                </WorkPrimaryImages>

                <WorkMain>
                    <p class="subtitle">{work.subtitle}</p>
                    <div class="markdown">
                        {work?.content?.html}
                    </div>
                    {work?.quote?.length > 0 && (
                        <Quote quote={work.quote} quoter={work.quoteAuthor} />
                    )}
                    <WorkPrimaryImages>
                    {(work.secondaryImages || []).map(image => (
                        <WorkPrimaryImage>
                            <img src={image.url} alt='' />
                        </WorkPrimaryImage>
                    ))}
                    </WorkPrimaryImages>
                    <MoreWork {next} />
                </WorkMain>
            </div>
        </Container>
        </WhiteBackground>
        <Footer footer={footer} />
    </div>
</Layout>