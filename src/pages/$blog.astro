---
import Layout from '../layouts/mainLayout.svelte';
import Container from '../components/atoms/Container.svelte';
import ListH1 from '../components/atoms/ListH1.svelte';
import H2 from '../components/atoms/H2.svelte';
import Quote from '../components/molecules/Quote.svelte';
import Header from '../components/molecules/Header.svelte';
import Footer from '../components/molecules/Footer.svelte';
import WhiteBackground from '../components/atoms/WhiteBackground.svelte';
import ScreenTransition from '../components/atoms/ScreenTransition.svelte';
import CTA from '../components/atoms/CTA.svelte';

import fetchData from '../helpers/fetchData';
import siteQuery from '../queries/site';
import query from '../queries/blogs';

const { collection } = Astro.props;

const siteData = await fetchData(fetch, siteQuery);
const { headers, footers } = siteData;
let { menu } = siteData;

menu = menu.sort((a, b) => a.order - b.order);

const header = headers[0];
const footer = footers[0];

export async function createCollection() {
    const {blogs = []} = await fetchData(fetch, query);

    return {
        routes: blogs.map(blog => ({slug: blog.slug, index: blog.id})),
        permalink: ({ params }) => `/blog/${params.slug}`,
        async data({ params }) {
            if (!params.slug) return {
                blogs
            };
            return blogs.find(blog => blog.slug === params.slug)
        },
        pageSize: Infinity,
    };
}

const {title, image, subtitle, content = {html: ''}, quote, quoter} = collection.data[0];
const blogs = collection.data[0].blogs?.filter((blog) => blog.stage === 'PUBLISHED')?.sort((a, b) => a.createdAt - b.createdAt)
const { html } = content;
---
<Layout title={`${title || 'Blog'} - Abell Design`} client:load>
    <div>
        <p class="hidden" style="position: absolute; left: -100vw" itemprop="name">Abell Design</p>
        <WhiteBackground>
            <div class="header-container">
                <Header {header} {menu} isHome={false} />
            </div>


        <Container>
            {title && (
                <div itemtype="https://schema.org/BlogPosting">
                    <ListH1 itemprop="headline">{title}</ListH1>
                    {image && (
                        <div style="display: flex; align-items: center; justify-content: center;">
                            <img src={image.url} alt="" itemprop="image" />
                        </div>
                    )}
                    <div itemprop="articleBody">
                    <H2>{subtitle}</H2>
                    <div class="html">
                        {html}
                    </div>
                    {quote && (
                        <Quote quote={quote} quoter={quoter} />
                    )}
                    </div>
                    
                </div>
            )}

            {blogs && (
                <>
                    <ListH1>Blog</ListH1>

                    <ul class="blog-list" itemscope itemtype="https://schema.org/Blog">
                        {blogs.map((blog) => (
                            <li class="blog-list-item">
                                <a href={`/blog/${blog.slug}`} itemprop="url">
                                    <div style="height: 200px; overflow: hidden;">
                                        <div style="display: flex; align-items: center; justify-content: center;">
                                            <img src={blog.featuredImage.url} alt="" itemprop="image" />
                                        </div>
                                    </div>

                                    <H2 style="text-align: left;">{blog.title}</H2>
                                </a>
                            </li>
                        ))}
                    </ul>
                </>
            )}
        </Container>  
        </WhiteBackground>
        <Footer footer={footer} />
        <ScreenTransition />  
    </div>

    <script type="module" src="/app.js" />
</Layout>