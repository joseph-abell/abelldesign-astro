---
import Layout from '../layouts/mainLayout.svelte';
import Container from '../components/atoms/Container.svelte';
import WorkImage from '../components/atoms/WorkImage.svelte';
import ListH1 from '../components/atoms/ListH1.svelte';
import WorkPrimaryImages from '../components/atoms/WorkPrimaryImages.svelte';
import WorkPrimaryImage from '../components/atoms/WorkPrimaryImage.svelte';
import WorkMain from '../components/atoms/WorkMain.svelte';
import Quote from '../components/molecules/Quote.svelte';
import List from '../components/molecules/List.svelte';
import MoreWork from '../components/atoms/MoreWork.svelte';
import Header from '../components/molecules/Header.svelte';
import Footer from '../components/molecules/Footer.svelte';
import WhiteBackground from '../components/atoms/WhiteBackground.svelte';
import ScreenTransition from '../components/atoms/ScreenTransition.svelte';

import fetchData from '../helpers/fetchData';
import siteQuery from '../queries/site';
import query from '../queries/works';
import nextWorkQuery from '../queries/nextWork';
import firstWorkQuery from '../queries/firstWork';

const { collection } = Astro.props;

const siteData = await fetchData(fetch, siteQuery);
const { headers, footers } = siteData;
let { menu } = siteData;

menu = menu.sort((a, b) => a.order - b.order);

const header = headers[0];
const footer = footers[0];

const work = collection.data.[0];
const { works, quote, quoter } = collection.data.[0];

const nextWork = work.id && await fetchData(fetch, nextWorkQuery, { id: work.id });
let nextData = nextWork?.worksConnection.edges[0];
let next;

if (!!nextData) {
    next = nextData && nextData.node;
} else {
    nextData = await fetchData(fetch, firstWorkQuery);
    next = nextData.works[0];
}

export async function createCollection() {
    let {works = [], worksPages = []} = await fetchData(fetch, query);

    works = works.map((work, index) => {
        work.oddEven = index % 2;
        return work;
    });

    let quote = worksPages[0]?.quote || '';
    let quoter = worksPages[0]?.quoter || '';

    return {
        routes: (works || []).map(work => ({ slug: work.slug })),
        permalink: ({ params }) => `/work/${params.slug}`,
        async data({ params }) {
            if (!params.slug) {
                return {
                    works,
                    quote,
                    quoter
                }
            }
            return {
                ...(works || []).find(work => work.slug === params.slug),
            }
        },
        pageSize: Infinity,
    };
}
---
<Layout title={`${work?.title || "Work"} - Abell Design`} client:load>
    <div id="swup">
        <p class="hidden" itemprop="name">Abell Design</p>
        <WhiteBackground>
            <div class="header-container">
                <Header {header} {menu} isHome={false} />
            </div>

        <Container>
            {work.title && (
                <div itemscope itemtype="https://schema.org/Service">
                    <ListH1 itemprop="name">{work.title}</ListH1>
                    <WorkPrimaryImages>
                        {(work.images || []).map(image => (
                            <WorkPrimaryImage>
                                <img src={image.url} alt='' itemprop="image" />
                            </WorkPrimaryImage>
                        ))}
                    </WorkPrimaryImages>

                    <WorkMain>
                        <p class="subtitle">{work.subtitle}</p>
                        <div class="markdown">
                            {work?.content?.html}
                        </div>
                        {work?.quote?.length > 0 && (
                            <Quote quote={work.quote} quoter={work.quoteAuthor} />
                        )}
                        <WorkPrimaryImages>
                        {(work.secondaryImages || []).map(image => (
                            <WorkPrimaryImage>
                                <img src={image.url} alt='' />
                            </WorkPrimaryImage>
                        ))}
                        </WorkPrimaryImages>
                        <MoreWork {next} />
                    </WorkMain>
                </div>
            )}

            {works && (
                <>
                    <List title="Work" data={works || []} headerType="h1" slugPrefix="/work" />

                    <Quote quote={quote} quoter={quoter} />
                </>
            )}
        </Container>
        </WhiteBackground>
        <Footer footer={footer} />
        <ScreenTransition />
    </div>
    <script type="module" src="/app.js" />
</Layout>